// Generated by CoffeeScript 1.4.0
(function() {
  var LooksGoodToMe,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  LooksGoodToMe = (function() {

    LooksGoodToMe.name = 'LooksGoodToMe';

    function LooksGoodToMe(options) {
      if (options == null) {
        options = {};
      }
      this.get_ci_build_status_icon = __bind(this.get_ci_build_status_icon, this);

      this.save_options = __bind(this.save_options, this);

      this.restore_options = __bind(this.restore_options, this);

      this.list_participants = __bind(this.list_participants, this);

      this.make_a_badge = __bind(this.make_a_badge, this);

      this.count_ones = __bind(this.count_ones, this);

      this.refresh = __bind(this.refresh, this);

      this.refresh_rate = options.refresh_rate || 5 * 60000;
      this.ci_status_selector = options.ci_status_selector || 'status_icon';
      this.default_plus_one_message = options.default_plus_one_message || '+1';
      this.good = options.good || 1;
      this.better = options.better || 2;
      this.best = options.best || 3;
      this.regexes = options.regexes || [/looks good to me/ig, /lgtm/ig, /\+1(\s|\z)/g, /title=":\+1:"/ig];
      this.restore_options();
      if (this.refresh_rate > 0) {
        setInterval(this.refresh, this.refresh_rate);
      }
      this.refresh();
    }

    LooksGoodToMe.prototype.refresh = function() {
      var _this = this;
      $('.lgtm_badge, .lgtm_button, .lgtm_icon, .lgtm_container').remove();
      $('.pulls-list .list-browser-item').each(function(index, listing) {
        var pull_url, title;
        title = $(listing).find('h3');
        pull_url = title.find('a').prop('href');
        return $.get(pull_url, function(response) {
          var container;
          container = $('<div>');
          container.addClass('lgtm_container');
          title.before(container);
          container.append(_this.make_a_badge(_this.count_ones(response).ones));
          container.find('.lgtm_badge').append(_this.list_participants(_this.count_ones(response).participants));
          return container.append(_this.get_ci_build_status_icon(response).addClass('lgtm_icon'));
        });
      });
      return $('#discussion_bucket').each(function(index, discussion) {
        var badge, button, merge_button, message, refresh, title;
        title = $(discussion).find('.discussion-topic-title');
        merge_button = $(discussion).find('.mergeable.clean .minibutton');
        if (badge = _this.make_a_badge(_this.count_ones(discussion).ones, 'lgtm_large')) {
          badge.clone().prependTo(title);
          badge.clone().prependTo(merge_button);
        }
        message = _this.default_plus_one_message;
        refresh = _this.refresh;
        button = $("<button type='submit'>" + message + "</button>");
        button.addClass('classy primary lgtm_button');
        button.click(function() {
          $(this).closest('form').find('.write-content textarea').html("" + message);
          return setTimeout(refresh, 5000);
        });
        return button.insertBefore('.discussion-bubble .classy.primary');
      });
    };

    LooksGoodToMe.prototype.count_ones = function(string) {
      var ones, participants,
        _this = this;
      ones = 0;
      participants = [];
      $('.comment-body', string).each(function(index, comment) {
        var comment_bubble, count, regex, _i, _len, _ref, _results;
        $(comment).find('.email-signature-reply').remove();
        $(comment).find('.email-quoted-reply').remove();
        _ref = _this.regexes;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          regex = _ref[_i];
          if (count = $(comment).html().match(regex)) {
            ones += count.length;
            comment_bubble = $(comment).closest('.discussion-bubble');
            _results.push(participants.push({
              name: $(comment_bubble).find('.comment-header-author').text(),
              image: $(comment_bubble).find('.discussion-bubble-avatar')
            }));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      });
      return {
        ones: ones,
        participants: participants
      };
    };

    LooksGoodToMe.prototype.make_a_badge = function(ones, extra_classes) {
      var badge;
      if (ones == null) {
        ones = 0;
      }
      if (extra_classes == null) {
        extra_classes = '';
      }
      badge = void 0;
      if (ones > 0) {
        badge = $('<span>');
        badge.addClass("lgtm_badge " + extra_classes);
        badge.html("+" + ones);
        if (ones >= this.good && ones < this.better) {
          badge.addClass('lgtm_good');
        } else if (ones >= this.better && ones < this.best) {
          badge.addClass('lgtm_better');
        } else if (ones >= this.best) {
          badge.addClass('lgtm_best');
        } else {
          badge.addClass('lgtm_okay');
        }
      }
      return badge;
    };

    LooksGoodToMe.prototype.list_participants = function(participants) {
      var image, list, participant, _i, _len;
      if (participants == null) {
        participants = [];
      }
      list = $('<span>');
      list.addClass('lgtm_participants');
      for (_i = 0, _len = participants.length; _i < _len; _i++) {
        participant = participants[_i];
        image = participant.image;
        image.prop('title', participant.name);
        image.addClass('participant_thumb');
        list.append(image);
      }
      return list;
    };

    LooksGoodToMe.prototype.restore_options = function() {
      var _this = this;
      chrome.storage.sync.get(null, function(items) {
        $("#regexes").attr("checked", items["show_badge"] === "true");
        $("#refresh_rate").attr("checked", items["show_notification"] === "true");
        $("#ci_status_selector").val(items["rss_url"]);
        return $("#default_plus_one_message").val(items["rss_url"]);
      });
      return chrome.storage.onChanged.addListener(function(changes, namespace) {
        var key, storageChange, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = changes.length; _i < _len; _i++) {
          key = changes[_i];
          storageChange = changes[key];
          this[key] = storageChange.newValue;
          _results.push(console.log('Storage key "%s" in namespace "%s" changed. Old value was "%s", new value is "%s".', key, namespace, storageChange.oldValue, storageChange.newValue));
        }
        return _results;
      });
    };

    LooksGoodToMe.prototype.save_options = function() {
      var _this = this;
      return chrome.storage.sync.set()({
        'regexes': $('#regexes').val(),
        'refresh_rate': $('#refresh_rate').val(),
        'ci_status_selector': $('#ci_status_selector').val(),
        'default_plus_one_message': $('#default_plus_one_message').val()
      }, function() {
        return message('Settings saved.');
      });
    };

    LooksGoodToMe.prototype.get_ci_build_status_icon = function(page_content) {
      return $(".starting-comment img[src*=" + this.ci_status_selector + "]", page_content);
    };

    return LooksGoodToMe;

  })();

  window.looks_good_to_me = new LooksGoodToMe();

}).call(this);
